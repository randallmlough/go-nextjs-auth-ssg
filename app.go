package main

import (
	"context"
	"embed"
	"io/fs"
	"log"
	"net/http"
	"path/filepath"

	"github.com/go-chi/chi/v5"
	"github.com/randallmlough/nextjs-ssg-auth/api"
	"github.com/randallmlough/nextjs-ssg-auth/config"
	"github.com/randallmlough/nextjs-ssg-auth/db"
	"github.com/randallmlough/nextjs-ssg-auth/server"
)

//go:embed client/dist
//go:embed client/dist/_next
//go:embed client/dist/_next/static/chunks/pages/*.js
//go:embed client/dist/_next/static/*/*.js
var nextFS embed.FS

func main() {
	cfg := config.New()
	r := chi.NewRouter()

	db, err := db.New(context.Background(), cfg.DB)
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	api := api.New(cfg, db)
	r.Mount("/api/v1", api.Middleware(api.RegisterRoutes()))

	r.Mount("/", embeddedFileServer("client/dist"))

	serverConfig := server.Config{
		Port:         cfg.Port,
		ReadTimeout:  0,
		WriteTimeout: 0,
		IdleTimeout:  0,
		Env:          cfg.Env,
	}
	if err := server.Serve(serverConfig, r); err != nil {
		log.Fatal(err)
	}
}

func embeddedFileServer(dir string) http.Handler {
	// Root at the `dist` folder generated by the Next.js frontend.
	distFS, err := fs.Sub(nextFS, dir)
	if err != nil {
		log.Fatal(err)
	}

	fileSystem := http.FS(distFS)
	fileServer := http.FileServer(fileSystem)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch {
		case r.URL.Path == "/":
			fileServer.ServeHTTP(w, r)
		case filepath.Ext(r.URL.Path) == "": // check whether the request is for a file or a path
			r.URL.Path += ".html"
			fileServer.ServeHTTP(w, r)
		default:
			fileServer.ServeHTTP(w, r)
		}
	})
}
